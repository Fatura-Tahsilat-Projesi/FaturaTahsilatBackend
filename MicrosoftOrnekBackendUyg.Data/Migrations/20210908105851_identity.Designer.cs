// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MicrosoftOrnekBackendUyg.Data;

namespace MicrosoftOrnekBackendUyg.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210908105851_identity")]
    partial class identity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MicrosoftOrnekBackendUyg.Core.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CompanyCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 1,
                            CompanyCode = 100,
                            Name = "Elektrik Firması"
                        },
                        new
                        {
                            Id = 2,
                            Category = 2,
                            CompanyCode = 101,
                            Name = "Su Firması"
                        },
                        new
                        {
                            Id = 3,
                            Category = 3,
                            CompanyCode = 102,
                            Name = "Doğalgaz Firması"
                        },
                        new
                        {
                            Id = 4,
                            Category = 4,
                            CompanyCode = 103,
                            Name = "İnternet Firması"
                        },
                        new
                        {
                            Id = 5,
                            Category = 5,
                            CompanyCode = 104,
                            Name = "Mobil Operatör Firması"
                        },
                        new
                        {
                            Id = 6,
                            Category = 6,
                            CompanyCode = 105,
                            Name = "Tv Yayın Firması"
                        });
                });

            modelBuilder.Entity("MicrosoftOrnekBackendUyg.Core.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExcludingVat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InvoiceNu")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceType")
                        .HasColumnType("int");

                    b.Property<int>("IsComplete")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalVat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            InvoiceId = 1,
                            CompanyId = 1,
                            DueDate = new DateTime(2021, 9, 1, 13, 35, 0, 0, DateTimeKind.Unspecified),
                            ExcludingVat = 80m,
                            InvoiceNu = 1,
                            InvoiceType = 1,
                            IsComplete = 0,
                            Name = "Elektrik Faturası Örneği",
                            StatusCode = 0,
                            Total = 150m,
                            TotalVat = 70m,
                            UserId = 1
                        },
                        new
                        {
                            InvoiceId = 2,
                            CompanyId = 1,
                            DueDate = new DateTime(2021, 9, 2, 10, 5, 0, 0, DateTimeKind.Unspecified),
                            ExcludingVat = 110m,
                            InvoiceNu = 2,
                            InvoiceType = 2,
                            IsComplete = 1,
                            Name = "Su Faturası Örneği",
                            StatusCode = 1,
                            Total = 170m,
                            TotalVat = 60m,
                            UserId = 1
                        },
                        new
                        {
                            InvoiceId = 3,
                            CompanyId = 1,
                            DueDate = new DateTime(2021, 9, 3, 11, 5, 0, 0, DateTimeKind.Unspecified),
                            ExcludingVat = 140m,
                            InvoiceNu = 3,
                            InvoiceType = 3,
                            IsComplete = 1,
                            Name = "Doğalgaz Faturası Örneği",
                            StatusCode = 1,
                            Total = 200m,
                            TotalVat = 60m,
                            UserId = 1
                        },
                        new
                        {
                            InvoiceId = 4,
                            CompanyId = 1,
                            DueDate = new DateTime(2021, 9, 4, 12, 5, 0, 0, DateTimeKind.Unspecified),
                            ExcludingVat = 40m,
                            InvoiceNu = 4,
                            InvoiceType = 4,
                            IsComplete = 1,
                            Name = "İnternet Faturası Örneği",
                            StatusCode = 1,
                            Total = 100m,
                            TotalVat = 60m,
                            UserId = 1
                        },
                        new
                        {
                            InvoiceId = 5,
                            CompanyId = 1,
                            DueDate = new DateTime(2021, 9, 5, 12, 25, 0, 0, DateTimeKind.Unspecified),
                            ExcludingVat = 30m,
                            InvoiceNu = 5,
                            InvoiceType = 5,
                            IsComplete = 1,
                            Name = "Mobil Fatura Örneği",
                            StatusCode = 1,
                            Total = 50m,
                            TotalVat = 20m,
                            UserId = 1
                        },
                        new
                        {
                            InvoiceId = 6,
                            CompanyId = 1,
                            DueDate = new DateTime(2021, 9, 6, 15, 5, 25, 0, DateTimeKind.Unspecified),
                            ExcludingVat = 40m,
                            InvoiceNu = 6,
                            InvoiceType = 6,
                            IsComplete = 1,
                            Name = "Tv Yayın Faturası Örneği",
                            StatusCode = 1,
                            Total = 100m,
                            TotalVat = 60m,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("MicrosoftOrnekBackendUyg.Core.Models.InvoiceActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceActivities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            InvoiceId = 1,
                            StatusCode = 0,
                            TransactionDate = new DateTime(2021, 9, 1, 10, 5, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            InvoiceId = 2,
                            StatusCode = 1,
                            TransactionDate = new DateTime(2021, 9, 2, 11, 25, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 3,
                            InvoiceId = 3,
                            StatusCode = 2,
                            TransactionDate = new DateTime(2021, 9, 3, 12, 5, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 4,
                            InvoiceId = 4,
                            StatusCode = 3,
                            TransactionDate = new DateTime(2021, 9, 4, 14, 5, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = 5,
                            InvoiceId = 5,
                            StatusCode = 50,
                            TransactionDate = new DateTime(2021, 9, 5, 15, 25, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            CompanyId = 6,
                            InvoiceId = 6,
                            StatusCode = -1,
                            TransactionDate = new DateTime(2021, 9, 6, 16, 5, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("MicrosoftOrnekBackendUyg.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Authorization")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Iban")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TcNu")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("CustomUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Erzurum",
                            Authorization = 2,
                            CreatedAt = new DateTime(2021, 9, 1, 10, 25, 0, 0, DateTimeKind.Unspecified),
                            Email = "muhammedkaradastr@gmail.com",
                            Iban = 1,
                            Name = "Muhammed ",
                            PhoneNu = "05342906884",
                            Surname = "Karadaş1",
                            TcNu = 1,
                            UserName = "superadmin"
                        },
                        new
                        {
                            Id = 2,
                            Address = "İstanbul",
                            Authorization = 1,
                            CreatedAt = new DateTime(2021, 9, 2, 12, 25, 0, 0, DateTimeKind.Unspecified),
                            Email = "muti5@windowslive.com",
                            Iban = 2,
                            Name = "Muhammed",
                            PhoneNu = "05342906884",
                            Surname = "Karadaş2",
                            TcNu = 2,
                            UserName = "normaladmin"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Erzurum",
                            Authorization = 0,
                            CreatedAt = new DateTime(2021, 9, 3, 15, 35, 0, 0, DateTimeKind.Unspecified),
                            Email = "muti323@gmail.com",
                            Iban = 3,
                            Name = "Muhammed",
                            PhoneNu = "05342906884",
                            Surname = "Karadaş3",
                            TcNu = 3,
                            UserName = "normaluser"
                        });
                });

            modelBuilder.Entity("MicrosoftOrnekBackendUyg.Core.Models.UserApp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MicrosoftOrnekBackendUyg.Core.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MicrosoftOrnekBackendUyg.Core.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MicrosoftOrnekBackendUyg.Core.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MicrosoftOrnekBackendUyg.Core.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MicrosoftOrnekBackendUyg.Core.Models.Invoice", b =>
                {
                    b.HasOne("MicrosoftOrnekBackendUyg.Core.Models.Company", "Company")
                        .WithMany("Invoices")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MicrosoftOrnekBackendUyg.Core.Models.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MicrosoftOrnekBackendUyg.Core.Models.InvoiceActivity", b =>
                {
                    b.HasOne("MicrosoftOrnekBackendUyg.Core.Models.Invoice", "Invoice")
                        .WithMany("InvoiceActivities")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("MicrosoftOrnekBackendUyg.Core.Models.Company", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("MicrosoftOrnekBackendUyg.Core.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceActivities");
                });

            modelBuilder.Entity("MicrosoftOrnekBackendUyg.Core.Models.User", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
